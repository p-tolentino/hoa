generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Hoa {
  id         String @id @default(cuid())
  name       String
  funds      Int
  fixedDue   Int?
  lotSizeDue Int?
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  image         String?
  emailVerified DateTime?
  password      String?
  role          UserRole      @default(USER)
  status        Status        @default(PENDING)
  accounts      Account[]
  info          PersonalInfo?
}

model PersonalInfo {
  id          String        @id @default(cuid())
  userId      String        @unique
  firstName   String?
  middleName  String?
  lastName    String?
  phoneNumber String?
  birthDay    DateTime?
  address     String?
  bio         String?
  type        String?
  position    String?       @default("Member")
  relation    HomeRelation?
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Vehicle {
  id       String  @id @unique @default(cuid())
  userId   String?
  plateNum String
}

model Property {
  id           String             @id @unique @default(cuid())
  address      String?
  lotNumber    String?
  lotSize      String?
  latitude     Int?
  longitude    Int?
  purchaseDate DateTime?
  documents    PropertyDocument[]
}

model PropertyDocument {
  id         String   @id @unique @default(cuid())
  propertyId String
  fileName   String?
  imageUrl   String?
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model UserPaymentInfo {
  id         String @id @unique @default(cuid())
  userId     String
  cardNumber String
}

model UserTransaction {
  id          String        @id @unique @default(cuid())
  addressId   String
  purpose     String
  description String
  amount      Int
  status      PaymentStatus @default(UNPAID)
  createdAt   DateTime      @default(now())
  updateAt    DateTime      @updatedAt
  datePaid    DateTime?
  paidBy      String?
}

model HoaTransaction {
  id          String             @id @unique @default(cuid())
  type        HoaTransactionType
  purpose     String
  description String
  amount      Int
  dateIssued  DateTime
  createdAt   DateTime           @default(now())
  updateAt    DateTime           @updatedAt
  userId      String
}

model Inflow {
  id     String     @id @unique @default(cuid())
  planId String
  title  String
  amount Int
  plan   BudgetPlan @relation(fields: [planId], references: [id], onDelete: Cascade)
}

model Outflow {
  id     String     @id @unique @default(cuid())
  planId String
  title  String
  amount Int
  plan   BudgetPlan @relation(fields: [planId], references: [id], onDelete: Cascade)
}

model BudgetPlan {
  id           String    @id @unique @default(cuid())
  title        String
  totalInflow  Int
  totalOutflow Int
  total        Int
  inflow       Inflow[]
  outflow      Outflow[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model ResetPasswordToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

enum UserRole {
  ADMIN
  USER
}

enum Status {
  ACTIVE
  INACTIVE
  PENDING
}

enum HomeRelation {
  PARENT
  CHILD
  HELPER
}

enum PaymentStatus {
  PAID
  UNPAID
  OVERDUE
}

enum HoaTransactionType {
  INCOME
  EXPENSE
}
