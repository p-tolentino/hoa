generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Hoa {
  id            String  @id @default(cuid())
  name          String
  startingFunds Int
  funds         Int
  fixedDue      Int?
  lotSizeDue    Int?
  byLawsLink    String?
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  image         String?
  emailVerified DateTime?
  password      String?
  role          UserRole      @default(USER)
  status        Status        @default(PENDING)
  accounts      Account[]
  info          PersonalInfo?
}

model PersonalInfo {
  id          String        @id @default(cuid())
  userId      String        @unique
  firstName   String?
  middleName  String?
  lastName    String?
  phoneNumber String?
  birthDay    DateTime?
  address     String?
  relation    HomeRelation?
  bio         String?
  type        String?
  position    String?       @default("Member")
  govtId      String?
  committee   String?
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Vehicle {
  id       String  @id @unique @default(cuid())
  userId   String?
  plateNum String
}

model Property {
  id           String    @id @unique @default(cuid())
  address      String?
  lotNumber    String?
  lotSize      String?
  latitude     Float?
  longitude    Float?
  purchaseDate DateTime?
}

model UserTransaction {
  id          String        @id @unique @default(cuid())
  addressId   String
  purpose     String
  description String
  amount      Int
  status      PaymentStatus @default(UNPAID)
  createdAt   DateTime      @default(now())
  updateAt    DateTime      @updatedAt
  datePaid    DateTime?
  paidBy      String?
}

model HoaTransaction {
  id          String             @id @unique @default(cuid())
  type        HoaTransactionType
  purpose     String
  description String
  amount      Int
  dateIssued  DateTime
  createdAt   DateTime           @default(now())
  updateAt    DateTime           @updatedAt
  userId      String
}

model BudgetPlan {
  id                        String @id @unique @default(cuid())
  title                     String
  forYear                   Int
  cybAssocDues              Int
  cybToll                   Int
  cybFacility               Int
  cybConstruction           Int
  cybCarSticker             Int
  cybOtherRev               Int
  ytdaAssocDues             Int?
  ytdaToll                  Int?
  ytdaFacility              Int?
  ytdaConstruction          Int?
  ytdaCarSticker            Int?
  ytdaOtherRev              Int?
  cybSalariesBenefits       Int
  cybUtilities              Int
  cybOfficeSupplies         Int
  cybRepairMaintenance      Int
  cybDonations              Int
  cybFurnituresFixtures     Int
  cybRepresentation         Int
  cybLegalProfessionalFees  Int
  cybAdministrativeCosts    Int
  cybOtherExp               Int
  ytdaSalariesBenefits      Int?
  ytdaUtilities             Int?
  ytdaOfficeSupplies        Int?
  ytdaRepairMaintenance     Int?
  ytdaDonations             Int?
  ytdaFurnituresFixtures    Int?
  ytdaRepresentation        Int?
  ytdaLegalProfessionalFees Int?
  ytdaAdministrativeCosts   Int?
  ytdaOtherExp              Int?
  cybTotalYearlyExp         Int
  cybTotalYearlyRev         Int
  cybTotalYearlySurplus     Int
  ytdaTotalYearlyExp        Int?
  ytdaTotalYearlyRev        Int?
  ytdaTotalYearlySurplus    Int?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model ResetPasswordToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Post {
  id          String       @id @unique @default(cuid())
  userId      String
  category    CategoryType
  type        PostType
  title       String
  description String
  status      Status       @default(PENDING)
  createdAt   DateTime     @default(now())
  comments    Comment[]
  likes       Like[]
}

model Like {
  id        String   @id @unique @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String   @id @unique @default(cuid())
  userId    String
  postId    String
  text      String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Polls {
  id          String       @id @unique @default(cuid())
  userId      String
  title       String
  description String
  category    CategoryType
  endDate     DateTime
  status      Status       @default(INACTIVE)
  createdAt   DateTime     @default(now())
  startDate   DateTime
  questions   Question[]
}

model Question {
  id      String   @id @unique @default(cuid())
  pollId  String
  text    String
  options Option[]
  polls   Polls    @relation(fields: [pollId], references: [id], onDelete: Cascade)
}

model Option {
  id         String   @id @unique @default(cuid())
  questionId String
  text       String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model Response {
  id         String   @id @unique @default(cuid())
  userId     String
  pollId     String
  questionId String
  optionId   String
  createdAt  DateTime @default(now())
}

model Events {
  id          String   @id @unique @default(cuid())
  title       String
  description String
  date        DateTime
  venue       String
  userId      String
}

model ViolationType {
  id          String @id @unique @default(cuid())
  name        String
  description String
  fee         Float
  deadline    Int
  title       String
}

model Violation {
  id              String   @id @unique @default(cuid())
  violationDate   DateTime
  type            String
  description     String
  personsInvolved String[]
  status          String?  @default("Pending")
  officerAssigned String?
  createdAt       DateTime @default(now())
  submittedBy     String
  number          Int      @default(autoincrement())
  progress        String   @default("Step 1: Violation Form Submission")
  step            Int      @default(1)
  letterSent      Boolean  @default(false)
}

model Notification {
  id          String   @id @unique @default(cuid())
  type        String
  userId      String[]
  title       String
  description String
  isRead      Boolean
  link        String
  createdAt   DateTime @default(now())
  isArchived  Boolean  @default(false)
}

model Notice {
  id        String   @id @unique @default(cuid())
  type      String
  recipient String
  meetDate  String?
  venue     String?
  sender    String
  createdAt DateTime @default(now())
  idToLink  String
}

model DisputeType {
  id          String @id @unique @default(cuid())
  name        String
  description String
  title       String
}

enum CategoryType {
  MEETING
  ELECTION
  INQUIRY
  EVENT
  FOODANDDRINK
  CLOTHING
  HOUSEHOLDITEMS
  HOMESERVICES
  OTHER
}

enum PostType {
  DISCUSSION
  BUSINESS
}

enum UserRole {
  ADMIN
  USER
}

enum Status {
  ACTIVE
  INACTIVE
  PENDING
}

enum HomeRelation {
  PARENT
  CHILD
  HELPER
}

enum PaymentStatus {
  PAID
  UNPAID
  OVERDUE
}

enum HoaTransactionType {
  REVENUE
  EXPENSE
}

enum RevenueCategory {
  AssociationDues
  Toll
  Facility
  Construction
  CarSticker
  Other
}

enum ExpenseCategory {
  SalariesBenefits
  Utilities
  OfficeSupplies
  RepairMaintenance
  Donations
  FurnituresFixtures
  Representation
  LegalProfessionalFees
  AdministrativeCosts
  Other
}
