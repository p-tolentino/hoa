generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Hoa {
  id            String  @id @default(cuid())
  name          String
  contactNumber Int
  startingFunds Int
  funds         Int
  fixedDue      Int?
  lotSizeDue    Int?
  byLawsLink    String?
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  image         String?
  emailVerified DateTime?
  password      String?
  role          UserRole      @default(USER)
  status        Status        @default(PENDING)
  accounts      Account[]
  info          PersonalInfo?
}

model PersonalInfo {
  id          String        @id @default(cuid())
  userId      String        @unique
  firstName   String?
  middleName  String?
  lastName    String?
  phoneNumber String?
  birthDay    DateTime?
  address     String?
  bio         String?
  type        String?
  relation    HomeRelation?
  govtId      String?
  position    String?       @default("Member")
  committee   String?
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Vehicle {
  id       String  @id @unique @default(cuid())
  userId   String?
  plateNum String
}

model Property {
  id           String    @id @unique @default(cuid())
  address      String?
  lotNumber    String?
  lotSize      String?
  latitude     Float?
  longitude    Float?
  purchaseDate DateTime?
}

model MonthlySoa {
  id           String        @id @unique @default(cuid())
  forMonth     Int
  forYear      Int
  addressId    String
  transactions String[]
  total        Float
  paidAmount   Float
  status       PaymentStatus @default(UNPAID)
  balance      Float
}

model UserTransaction {
  id          String        @id @unique @default(cuid())
  soaId       String
  purpose     String
  description String
  amount      Int
  createdAt   DateTime      @default(now())
  status      PaymentStatus @default(UNPAID)
  datePaid    DateTime?
  paidBy      String?
  addressId   String?
}

model HoaTransaction {
  id          String             @id @unique @default(cuid())
  type        HoaTransactionType
  purpose     String
  description String
  amount      Int
  dateIssued  DateTime
  createdAt   DateTime           @default(now())
  updateAt    DateTime           @updatedAt
  submittedBy String
}

model BudgetPlan {
  id                        String @id @unique @default(cuid())
  title                     String
  forYear                   Int
  cybAssocDues              Int
  cybToll                   Int
  cybFacility               Int
  cybConstruction           Int
  cybCarSticker             Int
  cybOtherRev               Int
  ytdaAssocDues             Int?
  ytdaToll                  Int?
  ytdaFacility              Int?
  ytdaConstruction          Int?
  ytdaCarSticker            Int?
  ytdaOtherRev              Int?
  cybSalariesBenefits       Int
  cybUtilities              Int
  cybOfficeSupplies         Int
  cybRepairMaintenance      Int
  cybDonations              Int
  cybFurnituresFixtures     Int
  cybRepresentation         Int
  cybLegalProfessionalFees  Int
  cybAdministrativeCosts    Int
  cybOtherExp               Int
  ytdaSalariesBenefits      Int?
  ytdaUtilities             Int?
  ytdaOfficeSupplies        Int?
  ytdaRepairMaintenance     Int?
  ytdaDonations             Int?
  ytdaFurnituresFixtures    Int?
  ytdaRepresentation        Int?
  ytdaLegalProfessionalFees Int?
  ytdaAdministrativeCosts   Int?
  ytdaOtherExp              Int?
  cybTotalYearlyExp         Int
  cybTotalYearlyRev         Int
  cybTotalYearlySurplus     Int
  ytdaTotalYearlyExp        Int?
  ytdaTotalYearlyRev        Int?
  ytdaTotalYearlySurplus    Int?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model ResetPasswordToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Post {
  id          String       @id @unique @default(cuid())
  userId      String
  category    CategoryType
  type        PostType
  title       String
  description String
  status      Status       @default(PENDING)
  createdAt   DateTime     @default(now())
  mediaLink   String?
  comments    Comment[]
  likes       Like[]
}

model Like {
  id        String   @id @unique @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String   @id @unique @default(cuid())
  userId    String
  postId    String
  text      String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Polls {
  id          String       @id @unique @default(cuid())
  userId      String
  title       String
  description String
  category    CategoryType
  endDate     DateTime
  status      Status       @default(INACTIVE)
  createdAt   DateTime     @default(now())
  startDate   DateTime
  questions   Question[]
}

model Question {
  id      String   @id @unique @default(cuid())
  pollId  String
  text    String
  options Option[]
  polls   Polls    @relation(fields: [pollId], references: [id], onDelete: Cascade)
}

model Option {
  id         String   @id @unique @default(cuid())
  questionId String
  text       String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model Response {
  id         String   @id @unique @default(cuid())
  userId     String
  pollId     String
  questionId String
  optionId   String
  createdAt  DateTime @default(now())
}

model Events {
  id          String   @id @unique @default(cuid())
  title       String
  description String
  date        DateTime
  venue       String
  userId      String
}

model ViolationType {
  id               String @id @unique @default(cuid())
  title            String
  description      String
  firstOffenseFee  Float
  secondOffenseFee Float
  thirdOffenseFee  Float
}

model Violation {
  id              String       @id @unique @default(cuid())
  violationDate   DateTime
  type            String
  description     String
  personsInvolved String[]
  documents       String[]
  status          ReportStatus @default(FOR_REVIEW)
  priority        Priority?
  officerAssigned String?
  createdAt       DateTime     @default(now())
  submittedBy     String
  number          Int          @default(autoincrement())
  progress        String       @default("Step 2 & 3: Review by Committe & Assignment")
  step            Int          @default(2)
  committeeReview String?
  letterSent      Boolean      @default(false)
  finalReview     String?
  reasonToClose   String?
  updatedAt       DateTime     @updatedAt
  commReviewDate  DateTime?
  finalReviewDate DateTime?
  feeToIncur      String?
}

model ViolationOfficerActivity {
  id            String    @id @unique @default(cuid())
  violationId   String
  title         String
  deadline      DateTime
  dateCompleted DateTime?
  isDone        Boolean   @default(false)
}

model ViolationProgress {
  id            String   @id @unique @default(cuid())
  activity      String
  title         String
  description   String
  document      String?
  dateSubmitted DateTime @default(now())
}

model Notification {
  id          String   @id @unique @default(cuid())
  type        String
  recipient   String
  title       String
  description String
  isRead      Boolean  @default(false)
  linkToView  String
  createdAt   DateTime @default(now())
  isArchived  Boolean  @default(false)
}

model Letter {
  id          String           @id @unique @default(cuid())
  type        LetterNoticeType
  recipient   String
  title       String
  description String
  meetDate    DateTime?
  venue       String?
  sender      String
  createdAt   DateTime         @default(now())
  idToLink    String
}

model Notice {
  id          String           @id @unique @default(cuid())
  type        LetterNoticeType
  recipient   String
  title       String
  description String
  sender      String
  createdAt   DateTime         @default(now())
  idToLink    String
}

model DisputeType {
  id          String @id @unique @default(cuid())
  description String
  title       String
}

model Dispute {
  id               String       @id @unique @default(cuid())
  disputeDate      DateTime
  type             String
  description      String
  personComplained String
  status           ReportStatus @default(FOR_REVIEW)
  priority         Priority?
  officerAssigned  String?
  createdAt        DateTime     @default(now())
  submittedBy      String
  number           Int          @default(autoincrement())
  progress         String       @default("Step 2: Review by Grievance & Adjudication Committee")
  step             Int          @default(2)
  committeeReview  String?
  letterSent       Boolean      @default(false)
  finalReview      String?
  reasonToClose    String?
  updatedAt        DateTime     @updatedAt
  commReviewDate   DateTime?
  documents        String[]
  feeToIncur       String?
  finalReviewDate  DateTime?
  violationId      String?
}

model DisputeOfficerActivity {
  id            String    @id @unique @default(cuid())
  disputeId     String
  title         String
  deadline      DateTime
  isDone        Boolean   @default(false)
  dateCompleted DateTime?
}

model DisputeProgress {
  id            String   @id @unique @default(cuid())
  activity      String
  title         String
  description   String
  document      String?
  dateSubmitted DateTime @default(now())
}

enum ReportStatus {
  FOR_REVIEW                @map("For Review")
  FOR_ASSIGNMENT            @map("For Officer Assignment")
  PENDING_LETTER_TO_BE_SENT @map("Pending Letter To Be Sent")
  NEGOTIATING               @map("Negotiating")
  CLOSED                    @map("Closed")
  FOR_FINAL_REVIEW          @map("For Final Review")
}

enum Priority {
  HIGH
  MEDIUM
  LOW
}

enum LetterNoticeType {
  DISPUTE
  VIOLATION
}

enum CategoryType {
  MEETING
  ELECTION
  INQUIRY
  EVENT
  FOODANDDRINK
  CLOTHING
  HOUSEHOLDITEMS
  HOMESERVICES
  OTHER
}

enum PostType {
  DISCUSSION
  BUSINESS
}

enum UserRole {
  ADMIN
  USER
  SUPERUSER
}

enum Status {
  ACTIVE
  INACTIVE
  PENDING
}

enum HomeRelation {
  PARENT
  CHILD
  HELPER
}

enum PaymentStatus {
  PAID
  UNPAID
  OVERDUE
}

enum HoaTransactionType {
  REVENUE
  EXPENSE
}
