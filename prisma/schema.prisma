// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ----------------------------------------------------------------
// ---------------------- CUSTOM TYPES --------------------------

enum UserRole {
  ADMIN
  USER
}

enum Status {
  ACTIVE
  INACTIVE
  PENDING
}

enum PaymentStatus {
  PAID
  UNPAID
}

enum HoaTransactionType {
  INCOME
  EXPENSE
}

// ----------------------------------------------------------------
// --------------------- DATABASE MODELS --------------------------

model HOA {
  id String @id @default(cuid())
  name String
  funds Int
}

// ----------------------------------------------------------------
// --------------------- USER/MEMBER INFO -------------------------

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  image         String?
  emailVerified DateTime?
  password      String?
  accounts      Account[]

  role          UserRole      @default(USER)
  status        Status        @default(PENDING)
  info          PersonalInfo?
}

model PersonalInfo {
  id          String    @id @default(cuid())
  userId      String    @unique
  firstName   String?
  middleName  String?
  lastName    String?
  phoneNumber String?
  birthDay    DateTime?

  address     String?

  bio         String?

  type        String?
  position    String?   @default("Member")


  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// ----------------------------------------------------------------
// --------------------- MEMBERSHIP MODULE ------------------------

model Vehicle {
  id       String  @id @unique @default(cuid())
  userId   String?  
  plateNum String?
}

model Property {
  id           String        @id @unique @default(cuid())
  userId       String?    
  occupantName String?   
  address      String?
  lotNumber    String?
  lotSize      String?
  latitude     Int?
  longitude    Int?
  documents    PropertyDocument[]
  purchaseDate DateTime?
}

model PropertyDocument {
  id         String  @id @unique @default(cuid())
  propertyId String
  fileName   String?
  imageUrl   String?

  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

// ----------------------------------------------------------------
// ----------------------- FINANCE MODULE -------------------------

model UserPaymentInfo {
  id String @id @unique @default(cuid())
  userId String
  cardNumber String
}

model UserTransaction {
  id String @id @unique @default(cuid())
  userId String
  purpose String
  description String
  amount Int
  status PaymentStatus
  createdAt DateTime @default(now())  // Date Transaction was made
  updateAt DateTime @updatedAt
  datePaid DateTime                   // Date Payment was paid
}

model HoaTransaction {
  id String @id @unique @default(cuid())
  type HoaTransactionType
  purpose String
  description String
  amount Int
  dateIssued DateTime                 // Date Payment was made
  createdAt DateTime @default(now())  // Date Entry was made
  updateAt DateTime @updatedAt
  userId String                       // Recorded by
}

model Inflow {
  id String @id @unique @default(cuid())
  planId String
  title String
  amount Int
  plan BudgetPlan @relation(fields: [planId], references: [id], onDelete: Cascade)
}

model Outflow {
  id String @id @unique @default(cuid())
  planId String
  title String
  amount Int
  plan BudgetPlan @relation(fields: [planId], references: [id], onDelete: Cascade)
}

model BudgetPlan {
  id String @id @unique @default(cuid())
  title String
  inflow Inflow[]
  outflow Outflow[]
  totalInflow Int
  totalOutflow Int
  total Int
}


// ----------------------------------------------------------------
// --------------------- MEMBERSHIP MODULE ------------------------


// ----------------------------------------------------------------
// --------------------- MEMBERSHIP MODULE ------------------------


// ----------------------------------------------------------------
// --------------------- ACCOUNT-RELATED --------------------------

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model ResetPasswordToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}
